[
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ResponseValidationError",
        "importPath": "fastapi.exceptions",
        "description": "fastapi.exceptions",
        "isExtraImport": true,
        "detail": "fastapi.exceptions",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "CustomError",
        "importPath": "exceptions.models",
        "description": "exceptions.models",
        "isExtraImport": true,
        "detail": "exceptions.models",
        "documentation": {}
    },
    {
        "label": "ExceptionContent",
        "importPath": "exceptions.models",
        "description": "exceptions.models",
        "isExtraImport": true,
        "detail": "exceptions.models",
        "documentation": {}
    },
    {
        "label": "CustomError",
        "importPath": "exceptions.models",
        "description": "exceptions.models",
        "isExtraImport": true,
        "detail": "exceptions.models",
        "documentation": {}
    },
    {
        "label": "CustomError",
        "importPath": "exceptions.models",
        "description": "exceptions.models",
        "isExtraImport": true,
        "detail": "exceptions.models",
        "documentation": {}
    },
    {
        "label": "CustomError",
        "importPath": "exceptions.models",
        "description": "exceptions.models",
        "isExtraImport": true,
        "detail": "exceptions.models",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "desc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "asc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeMeta",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeMeta",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "init_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "enum",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "enum",
        "description": "enum",
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "responses.models",
        "description": "responses.models",
        "isExtraImport": true,
        "detail": "responses.models",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "responses.models",
        "description": "responses.models",
        "isExtraImport": true,
        "detail": "responses.models",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "responses.models",
        "description": "responses.models",
        "isExtraImport": true,
        "detail": "responses.models",
        "documentation": {}
    },
    {
        "label": "MetaData",
        "importPath": "responses.models",
        "description": "responses.models",
        "isExtraImport": true,
        "detail": "responses.models",
        "documentation": {}
    },
    {
        "label": "MetaData",
        "importPath": "responses.models",
        "description": "responses.models",
        "isExtraImport": true,
        "detail": "responses.models",
        "documentation": {}
    },
    {
        "label": "create_response",
        "importPath": "responses.handler",
        "description": "responses.handler",
        "isExtraImport": true,
        "detail": "responses.handler",
        "documentation": {}
    },
    {
        "label": "create_response",
        "importPath": "responses.handler",
        "description": "responses.handler",
        "isExtraImport": true,
        "detail": "responses.handler",
        "documentation": {}
    },
    {
        "label": "booking_service",
        "importPath": "modules.bookings.services",
        "description": "modules.bookings.services",
        "isExtraImport": true,
        "detail": "modules.bookings.services",
        "documentation": {}
    },
    {
        "label": "get_bookings",
        "importPath": "modules.bookings.services",
        "description": "modules.bookings.services",
        "isExtraImport": true,
        "detail": "modules.bookings.services",
        "documentation": {}
    },
    {
        "label": "check_booking_status_service",
        "importPath": "modules.bookings.services",
        "description": "modules.bookings.services",
        "isExtraImport": true,
        "detail": "modules.bookings.services",
        "documentation": {}
    },
    {
        "label": "BookingCreateRequest",
        "importPath": "modules.bookings.schemas",
        "description": "modules.bookings.schemas",
        "isExtraImport": true,
        "detail": "modules.bookings.schemas",
        "documentation": {}
    },
    {
        "label": "BookingCreateResponse",
        "importPath": "modules.bookings.schemas",
        "description": "modules.bookings.schemas",
        "isExtraImport": true,
        "detail": "modules.bookings.schemas",
        "documentation": {}
    },
    {
        "label": "BookingListResponse",
        "importPath": "modules.bookings.schemas",
        "description": "modules.bookings.schemas",
        "isExtraImport": true,
        "detail": "modules.bookings.schemas",
        "documentation": {}
    },
    {
        "label": "checkBookingStatusResponse",
        "importPath": "modules.bookings.schemas",
        "description": "modules.bookings.schemas",
        "isExtraImport": true,
        "detail": "modules.bookings.schemas",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "ServiceReferenceResponseForBookingService",
        "importPath": "modules.services.schemas",
        "description": "modules.services.schemas",
        "isExtraImport": true,
        "detail": "modules.services.schemas",
        "documentation": {}
    },
    {
        "label": "ServiceReferenceResponseForBookingService",
        "importPath": "modules.services.schemas",
        "description": "modules.services.schemas",
        "isExtraImport": true,
        "detail": "modules.services.schemas",
        "documentation": {}
    },
    {
        "label": "ServiceReferenceResponseForBookingService",
        "importPath": "modules.services.schemas",
        "description": "modules.services.schemas",
        "isExtraImport": true,
        "detail": "modules.services.schemas",
        "documentation": {}
    },
    {
        "label": "ServiceCreateRequest",
        "importPath": "modules.services.schemas",
        "description": "modules.services.schemas",
        "isExtraImport": true,
        "detail": "modules.services.schemas",
        "documentation": {}
    },
    {
        "label": "ServiceCreateResponse",
        "importPath": "modules.services.schemas",
        "description": "modules.services.schemas",
        "isExtraImport": true,
        "detail": "modules.services.schemas",
        "documentation": {}
    },
    {
        "label": "ServiceListResponse",
        "importPath": "modules.services.schemas",
        "description": "modules.services.schemas",
        "isExtraImport": true,
        "detail": "modules.services.schemas",
        "documentation": {}
    },
    {
        "label": "ServiceUpdateRequest",
        "importPath": "modules.services.schemas",
        "description": "modules.services.schemas",
        "isExtraImport": true,
        "detail": "modules.services.schemas",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy.future",
        "description": "sqlalchemy.future",
        "isExtraImport": true,
        "detail": "sqlalchemy.future",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "modules.services.models",
        "description": "modules.services.models",
        "isExtraImport": true,
        "detail": "modules.services.models",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "modules.services.models",
        "description": "modules.services.models",
        "isExtraImport": true,
        "detail": "modules.services.models",
        "documentation": {}
    },
    {
        "label": "Booking",
        "importPath": "modules.bookings.models",
        "description": "modules.bookings.models",
        "isExtraImport": true,
        "detail": "modules.bookings.models",
        "documentation": {}
    },
    {
        "label": "Booking",
        "importPath": "modules.bookings.models",
        "description": "modules.bookings.models",
        "isExtraImport": true,
        "detail": "modules.bookings.models",
        "documentation": {}
    },
    {
        "label": "query_builder",
        "importPath": "utils.query_builder",
        "description": "utils.query_builder",
        "isExtraImport": true,
        "detail": "utils.query_builder",
        "documentation": {}
    },
    {
        "label": "query_builder",
        "importPath": "utils.query_builder",
        "description": "utils.query_builder",
        "isExtraImport": true,
        "detail": "utils.query_builder",
        "documentation": {}
    },
    {
        "label": "transform_service_data",
        "importPath": "modules.bookings.utils",
        "description": "modules.bookings.utils",
        "isExtraImport": true,
        "detail": "modules.bookings.utils",
        "documentation": {}
    },
    {
        "label": "make_html_body",
        "importPath": "modules.bookings.utils",
        "description": "modules.bookings.utils",
        "isExtraImport": true,
        "detail": "modules.bookings.utils",
        "documentation": {}
    },
    {
        "label": "send_email",
        "importPath": "utils.send_mail",
        "description": "utils.send_mail",
        "isExtraImport": true,
        "detail": "utils.send_mail",
        "documentation": {}
    },
    {
        "label": "EmailSchema",
        "importPath": "utils.send_mail",
        "description": "utils.send_mail",
        "isExtraImport": true,
        "detail": "utils.send_mail",
        "documentation": {}
    },
    {
        "label": "create_service",
        "importPath": "modules.services.services",
        "description": "modules.services.services",
        "isExtraImport": true,
        "detail": "modules.services.services",
        "documentation": {}
    },
    {
        "label": "get_services",
        "importPath": "modules.services.services",
        "description": "modules.services.services",
        "isExtraImport": true,
        "detail": "modules.services.services",
        "documentation": {}
    },
    {
        "label": "delete_service",
        "importPath": "modules.services.services",
        "description": "modules.services.services",
        "isExtraImport": true,
        "detail": "modules.services.services",
        "documentation": {}
    },
    {
        "label": "update_service",
        "importPath": "modules.services.services",
        "description": "modules.services.services",
        "isExtraImport": true,
        "detail": "modules.services.services",
        "documentation": {}
    },
    {
        "label": "service_router",
        "importPath": "modules.services.routers",
        "description": "modules.services.routers",
        "isExtraImport": true,
        "detail": "modules.services.routers",
        "documentation": {}
    },
    {
        "label": "booking_router",
        "importPath": "modules.bookings.routers",
        "description": "modules.bookings.routers",
        "isExtraImport": true,
        "detail": "modules.bookings.routers",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "aiosmtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiosmtplib",
        "description": "aiosmtplib",
        "detail": "aiosmtplib",
        "documentation": {}
    },
    {
        "label": "EmailMessage",
        "importPath": "email.message",
        "description": "email.message",
        "isExtraImport": true,
        "detail": "email.message",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "routes.router",
        "description": "routes.router",
        "isExtraImport": true,
        "detail": "routes.router",
        "documentation": {}
    },
    {
        "label": "register_all_errors",
        "importPath": "exceptions.handler",
        "description": "exceptions.handler",
        "isExtraImport": true,
        "detail": "exceptions.handler",
        "documentation": {}
    },
    {
        "label": "register_all_errors",
        "kind": 2,
        "importPath": "app.exceptions.handler",
        "description": "app.exceptions.handler",
        "peekOfCode": "def register_all_errors(app: FastAPI):\n    # Handling CustomError \n    @app.exception_handler(CustomError)\n    async def database__error(request, exc):\n        content = ExceptionContent(message= exc.message, resolution= exc.resolution or \"No resolution provided\",).to_dict()\n        return JSONResponse(\n            content=content,\n            status_code=exc.status_code,\n        )\n    # # Handling SQLAlchemyError",
        "detail": "app.exceptions.handler",
        "documentation": {}
    },
    {
        "label": "AIPolicingException",
        "kind": 6,
        "importPath": "app.exceptions.models",
        "description": "app.exceptions.models",
        "peekOfCode": "class AIPolicingException(Exception):\n    \"\"\"This is the base class for all AIPolicing errors\"\"\"\n    def __init__(self, status_code: int, message: str, resolution: str = None):\n        self.status_code = status_code\n        self.message = message\n        self.resolution = resolution\n        super().__init__(message)\nclass CustomError(AIPolicingException):\n    \"\"\"User has provided an invalid or expired token\"\"\"\n    def __init__(self, status_code: int, message: str, resolution: str = None):",
        "detail": "app.exceptions.models",
        "documentation": {}
    },
    {
        "label": "CustomError",
        "kind": 6,
        "importPath": "app.exceptions.models",
        "description": "app.exceptions.models",
        "peekOfCode": "class CustomError(AIPolicingException):\n    \"\"\"User has provided an invalid or expired token\"\"\"\n    def __init__(self, status_code: int, message: str, resolution: str = None):\n        super().__init__(status_code, message, resolution)\n    def __str__(self):\n        return f\"CustomError(status_code={self.status_code}, message={self.message}, resolution={self.resolution})\"\nclass ExceptionContent():\n    is_success: bool = False\n    error: Any = None\n    def __init__(self, message: str, resolution: Optional[str]= \"No resolution provided\"):",
        "detail": "app.exceptions.models",
        "documentation": {}
    },
    {
        "label": "ExceptionContent",
        "kind": 6,
        "importPath": "app.exceptions.models",
        "description": "app.exceptions.models",
        "peekOfCode": "class ExceptionContent():\n    is_success: bool = False\n    error: Any = None\n    def __init__(self, message: str, resolution: Optional[str]= \"No resolution provided\"):\n        self.error = {\n            \"message\": message,\n            \"resolution\": resolution,\n        }\n    def to_dict(self):\n        return {\"is_success\": self.is_success, \"error\": self.error}",
        "detail": "app.exceptions.models",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "app.exceptions.models",
        "description": "app.exceptions.models",
        "peekOfCode": "T = TypeVar(\"T\")\nclass AIPolicingException(Exception):\n    \"\"\"This is the base class for all AIPolicing errors\"\"\"\n    def __init__(self, status_code: int, message: str, resolution: str = None):\n        self.status_code = status_code\n        self.message = message\n        self.resolution = resolution\n        super().__init__(message)\nclass CustomError(AIPolicingException):\n    \"\"\"User has provided an invalid or expired token\"\"\"",
        "detail": "app.exceptions.models",
        "documentation": {}
    },
    {
        "label": "StatusTypeEnum",
        "kind": 6,
        "importPath": "app.modules.bookings.models",
        "description": "app.modules.bookings.models",
        "peekOfCode": "class StatusTypeEnum(enum.Enum):\n    pending = \"pending\" #Booking request has been made but not yet confirmed.\n    confirmed = \"confirmed\" # Booking is accepted and scheduled.\n    in_progress= \"in_progress\" # The service is currently being provided.\n    completed = \"Completed\" # The service has been successfully completed.\n    cancelled=\"cancelled\"   #Booking was cancelled by the user or provider.\nclass Booking(Base):\n    __tablename__ = \"bookings\"\n    id = Column(Integer, primary_key=True, index=True)\n    customer_name = Column(String,  unique=False, index=False)",
        "detail": "app.modules.bookings.models",
        "documentation": {}
    },
    {
        "label": "Booking",
        "kind": 6,
        "importPath": "app.modules.bookings.models",
        "description": "app.modules.bookings.models",
        "peekOfCode": "class Booking(Base):\n    __tablename__ = \"bookings\"\n    id = Column(Integer, primary_key=True, index=True)\n    customer_name = Column(String,  unique=False, index=False)\n    customer_phone = Column(String,  unique=False, index=False)\n    customer_email = Column(String,  unique=False, index=False)\n    service_id= Column(Integer, ForeignKey('services.id'), nullable=False)\n    status = Column(Enum(StatusTypeEnum), nullable=False, default=StatusTypeEnum.pending)\n    # relationship \n    service = relationship(\"Service\", back_populates=\"bookings\")",
        "detail": "app.modules.bookings.models",
        "documentation": {}
    },
    {
        "label": "booking_router",
        "kind": 5,
        "importPath": "app.modules.bookings.routers",
        "description": "app.modules.bookings.routers",
        "peekOfCode": "booking_router = APIRouter()\n@booking_router.post(\"/booking-service\", response_model=  Response[BookingCreateResponse])\nasync def add_service(booking: BookingCreateRequest, db: AsyncSession = Depends(get_db)):\n    result= await booking_service(db=db, customer_name= booking.customer_name, customer_phone= booking.customer_phone, customer_email= booking.customer_email, service_id=booking.service_id )\n    return create_response(result=result, pydantic_model=BookingCreateResponse, message=\"Service has booked successfully\")\n@booking_router.get(\"/get-bookings\"\n, response_model=Response[list[BookingListResponse]]\n)\nasync def list_services(db: AsyncSession = Depends(get_db), page:int=1, limit:int=10):\n    result= await get_bookings(db, page, limit)",
        "detail": "app.modules.bookings.routers",
        "documentation": {}
    },
    {
        "label": "StatusTypeEnum",
        "kind": 6,
        "importPath": "app.modules.bookings.schemas",
        "description": "app.modules.bookings.schemas",
        "peekOfCode": "class StatusTypeEnum(str, Enum):\n    pending = \"pending\" #Booking request has been made but not yet confirmed.\n    confirmed = \"confirmed\" # Booking is accepted and scheduled.\n    in_progress= \"in_progress\" # The service is currently being provided.\n    completed = \"Completed\" # The service has been successfully completed.\n    cancelled=\"cancelled\"   #Booking was cancelled by the user or provider.\nclass BookingCreateRequest(BaseModel):\n    customer_name : str\n    customer_phone: str\n    customer_email: str",
        "detail": "app.modules.bookings.schemas",
        "documentation": {}
    },
    {
        "label": "BookingCreateRequest",
        "kind": 6,
        "importPath": "app.modules.bookings.schemas",
        "description": "app.modules.bookings.schemas",
        "peekOfCode": "class BookingCreateRequest(BaseModel):\n    customer_name : str\n    customer_phone: str\n    customer_email: str\n    service_id: int\nclass BookingCreateResponse(BaseModel):\n    id: int\n    customer_name : str\n    customer_phone: str\n    customer_email: str",
        "detail": "app.modules.bookings.schemas",
        "documentation": {}
    },
    {
        "label": "BookingCreateResponse",
        "kind": 6,
        "importPath": "app.modules.bookings.schemas",
        "description": "app.modules.bookings.schemas",
        "peekOfCode": "class BookingCreateResponse(BaseModel):\n    id: int\n    customer_name : str\n    customer_phone: str\n    customer_email: str\n    status: StatusTypeEnum\n    service : ServiceReferenceResponseForBookingService\n    created_at: datetime\n    updated_at: datetime\n    class Config:",
        "detail": "app.modules.bookings.schemas",
        "documentation": {}
    },
    {
        "label": "BookingListResponse",
        "kind": 6,
        "importPath": "app.modules.bookings.schemas",
        "description": "app.modules.bookings.schemas",
        "peekOfCode": "class BookingListResponse(BookingCreateResponse):\n    # extra_field: str  # Add extra fields if needed\n    pass\nclass checkBookingStatusResponse(BookingCreateResponse):\n    # extra_field: str  # Add extra fields if needed\n    pass",
        "detail": "app.modules.bookings.schemas",
        "documentation": {}
    },
    {
        "label": "checkBookingStatusResponse",
        "kind": 6,
        "importPath": "app.modules.bookings.schemas",
        "description": "app.modules.bookings.schemas",
        "peekOfCode": "class checkBookingStatusResponse(BookingCreateResponse):\n    # extra_field: str  # Add extra fields if needed\n    pass",
        "detail": "app.modules.bookings.schemas",
        "documentation": {}
    },
    {
        "label": "transform_service_data",
        "kind": 2,
        "importPath": "app.modules.bookings.utils",
        "description": "app.modules.bookings.utils",
        "peekOfCode": "def transform_service_data(booking):\n    \"\"\"Transforms a Booking ORM object into a dictionary format with nested schema.\"\"\"\n    return {\n        \"id\": booking.id,\n        \"customer_name\": booking.customer_name,\n        \"customer_phone\": booking.customer_phone,\n        \"customer_email\": booking.customer_email,\n        \"status\": booking.status,\n        \"service\": ServiceReferenceResponseForBookingService(**booking.service.__dict__) if booking.service else None,\n        \"created_at\": booking.created_at,",
        "detail": "app.modules.bookings.utils",
        "documentation": {}
    },
    {
        "label": "make_html_body",
        "kind": 2,
        "importPath": "app.modules.bookings.utils",
        "description": "app.modules.bookings.utils",
        "peekOfCode": "def make_html_body(customer_name: str, customer_phone:str, customer_email:str, service_id = int):\n    html_body = f\"\"\"\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: auto; padding: 20px; background-color: #f9f9f9; border-radius: 8px; border: 1px solid #e0e0e0;\">\n        <h2 style=\"text-align: center; color: #333;\">🎉 Booking Confirmed!</h2>\n        <p style=\"font-size: 16px; color: #444;\">Hi <strong>{customer_name}</strong>,</p>\n        <p style=\"font-size: 15px; color: #555;\">\n            Your service booking has been successfully confirmed. Here are the details:\n        </p>\n        <div style=\"background-color: #ffffff; padding: 15px; border-radius: 6px; border: 1px solid #ddd; margin-top: 15px;\">\n            <p><strong>📞 Phone:</strong> {customer_phone}</p>",
        "detail": "app.modules.bookings.utils",
        "documentation": {}
    },
    {
        "label": "Service",
        "kind": 6,
        "importPath": "app.modules.services.models",
        "description": "app.modules.services.models",
        "peekOfCode": "class Service(Base):\n    __tablename__ = \"services\"\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String,  unique=True, index=False)\n    category = Column(String,  unique=False, index=False)\n    description = Column(String,  unique=False, index=False)\n    price = Column(Integer,  unique=False, index=False)\n    # Reverse relationship\n    bookings = relationship(\"Booking\", back_populates=\"service\", cascade=\"all, delete\")",
        "detail": "app.modules.services.models",
        "documentation": {}
    },
    {
        "label": "service_router",
        "kind": 5,
        "importPath": "app.modules.services.routers",
        "description": "app.modules.services.routers",
        "peekOfCode": "service_router = APIRouter()\n@service_router.post(\"/add-service\", response_model=  Response[ServiceCreateResponse]\n)\nasync def add_service(service: ServiceCreateRequest, db: AsyncSession = Depends(get_db)):\n    result= await create_service(db=db, name= service.name, category= service.category, description= service.description, price=service.price )\n    return create_response(result=result, pydantic_model=ServiceCreateResponse, message=\"Service has added successfully\")\n@service_router.get(\"/get-services\"\n, response_model=Response[list[ServiceListResponse]]\n)\nasync def list_services(page:int=1, limit:int=10, category:str=None, db: AsyncSession = Depends(get_db)):",
        "detail": "app.modules.services.routers",
        "documentation": {}
    },
    {
        "label": "ServiceCreateRequest",
        "kind": 6,
        "importPath": "app.modules.services.schemas",
        "description": "app.modules.services.schemas",
        "peekOfCode": "class ServiceCreateRequest(BaseModel):\n    name : str\n    category : str\n    description : str\n    price : int\nclass ServiceCreateResponse(BaseModel):\n    id: int\n    name : str\n    category : str\n    description : str",
        "detail": "app.modules.services.schemas",
        "documentation": {}
    },
    {
        "label": "ServiceCreateResponse",
        "kind": 6,
        "importPath": "app.modules.services.schemas",
        "description": "app.modules.services.schemas",
        "peekOfCode": "class ServiceCreateResponse(BaseModel):\n    id: int\n    name : str\n    category : str\n    description : str\n    price : int\n    class Config:\n        orm_mode = True\n        extra = \"ignore\"\nclass ServiceListResponse(ServiceCreateResponse):",
        "detail": "app.modules.services.schemas",
        "documentation": {}
    },
    {
        "label": "ServiceListResponse",
        "kind": 6,
        "importPath": "app.modules.services.schemas",
        "description": "app.modules.services.schemas",
        "peekOfCode": "class ServiceListResponse(ServiceCreateResponse):\n    # extra_field: str  # Add extra fields if needed\n    pass\nclass ServiceReferenceResponseForBookingService(BaseModel):\n    id: int\n    name : str\n    category : str\n    # description : str\n    # price : int\n    class Config:",
        "detail": "app.modules.services.schemas",
        "documentation": {}
    },
    {
        "label": "ServiceReferenceResponseForBookingService",
        "kind": 6,
        "importPath": "app.modules.services.schemas",
        "description": "app.modules.services.schemas",
        "peekOfCode": "class ServiceReferenceResponseForBookingService(BaseModel):\n    id: int\n    name : str\n    category : str\n    # description : str\n    # price : int\n    class Config:\n        orm_mode = True\n        extra = \"ignore\"\nclass ServiceUpdateRequest(ServiceCreateResponse):",
        "detail": "app.modules.services.schemas",
        "documentation": {}
    },
    {
        "label": "ServiceUpdateRequest",
        "kind": 6,
        "importPath": "app.modules.services.schemas",
        "description": "app.modules.services.schemas",
        "peekOfCode": "class ServiceUpdateRequest(ServiceCreateResponse):\n    pass",
        "detail": "app.modules.services.schemas",
        "documentation": {}
    },
    {
        "label": "UserRoleEnum",
        "kind": 6,
        "importPath": "app.modules.users.models",
        "description": "app.modules.users.models",
        "peekOfCode": "class UserRoleEnum(enum.Enum):\n    admin = \"admin\"\n    # user =  \"user\"\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True, index=True)\n    role = Column(Enum(UserRoleEnum), nullable=False, default= \"admin\")\n    name = Column(String,  unique=False, index=True)\n    password = Column(String, nullable=False)",
        "detail": "app.modules.users.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.modules.users.models",
        "description": "app.modules.users.models",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, index=True)\n    email = Column(String, unique=True, index=True)\n    role = Column(Enum(UserRoleEnum), nullable=False, default= \"admin\")\n    name = Column(String,  unique=False, index=True)\n    password = Column(String, nullable=False)",
        "detail": "app.modules.users.models",
        "documentation": {}
    },
    {
        "label": "create_response",
        "kind": 2,
        "importPath": "app.responses.handler",
        "description": "app.responses.handler",
        "peekOfCode": "def create_response(message: str,\n                    result: Union[Base, List[Base], dict, List[dict], None], \n                    pydantic_model: Optional[Type[declarative_base]] = None,\n                    meta_data: Optional[MetaData] = None\n                    ) -> Response:\n    if not result:\n        return Response(message=message, data=result, meta_data=meta_data)\n    result_dict = None  # Placeholder\n    if isinstance(result, list):\n        # Check if list contains ORM objects",
        "detail": "app.responses.handler",
        "documentation": {}
    },
    {
        "label": "MetaData",
        "kind": 6,
        "importPath": "app.responses.models",
        "description": "app.responses.models",
        "peekOfCode": "class MetaData(BaseModel):\n    previous_page: Optional[int]  # Can be int or None\n    next_page: Optional[int]  # Can be int or None\n    current_page: int\n    total_page: int # total number of pages depending on page limit\n    class Config:\n        orm_mode = True\nclass Response(BaseModel, Generic[T]):\n    is_success: bool = True\n    message: str",
        "detail": "app.responses.models",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 6,
        "importPath": "app.responses.models",
        "description": "app.responses.models",
        "peekOfCode": "class Response(BaseModel, Generic[T]):\n    is_success: bool = True\n    message: str\n    data: T\n    meta_data: Optional[MetaData]",
        "detail": "app.responses.models",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "app.responses.models",
        "description": "app.responses.models",
        "peekOfCode": "T = TypeVar(\"T\")\nclass MetaData(BaseModel):\n    previous_page: Optional[int]  # Can be int or None\n    next_page: Optional[int]  # Can be int or None\n    current_page: int\n    total_page: int # total number of pages depending on page limit\n    class Config:\n        orm_mode = True\nclass Response(BaseModel, Generic[T]):\n    is_success: bool = True",
        "detail": "app.responses.models",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routes.router",
        "description": "app.routes.router",
        "peekOfCode": "router = APIRouter()\n# calling a router depends on prefix\nrouter.include_router(service_router, prefix=\"/services\", tags=[\"Services\"]) \nrouter.include_router(booking_router, prefix=\"/booking\", tags=[\"Bookings\"])",
        "detail": "app.routes.router",
        "documentation": {}
    },
    {
        "label": "EmailSchema",
        "kind": 6,
        "importPath": "app.utils.send_mail",
        "description": "app.utils.send_mail",
        "peekOfCode": "class EmailSchema(BaseModel):\n    receiver_email: str\n    subject: str\n    html_body: str\nasync def send_email(email_data: EmailSchema) -> Optional[bool]:\n    \"\"\"Send an email using an asynchronous SMTP client.\"\"\"\n    try:\n        message = EmailMessage()\n        message[\"From\"] = f\"Sheba.xyz <{SENDER_EMAIL}>\"\n        message[\"To\"] = email_data.receiver_email",
        "detail": "app.utils.send_mail",
        "documentation": {}
    },
    {
        "label": "SMTP_HOST",
        "kind": 5,
        "importPath": "app.utils.send_mail",
        "description": "app.utils.send_mail",
        "peekOfCode": "SMTP_HOST = \"smtp.gmail.com\"\nSMTP_PORT = 465\nSENDER_EMAIL = \"khalidmimm@gmail.com\"\nSENDER_PASSWORD = Config.SENDER_PASSWORD \nclass EmailSchema(BaseModel):\n    receiver_email: str\n    subject: str\n    html_body: str\nasync def send_email(email_data: EmailSchema) -> Optional[bool]:\n    \"\"\"Send an email using an asynchronous SMTP client.\"\"\"",
        "detail": "app.utils.send_mail",
        "documentation": {}
    },
    {
        "label": "SMTP_PORT",
        "kind": 5,
        "importPath": "app.utils.send_mail",
        "description": "app.utils.send_mail",
        "peekOfCode": "SMTP_PORT = 465\nSENDER_EMAIL = \"khalidmimm@gmail.com\"\nSENDER_PASSWORD = Config.SENDER_PASSWORD \nclass EmailSchema(BaseModel):\n    receiver_email: str\n    subject: str\n    html_body: str\nasync def send_email(email_data: EmailSchema) -> Optional[bool]:\n    \"\"\"Send an email using an asynchronous SMTP client.\"\"\"\n    try:",
        "detail": "app.utils.send_mail",
        "documentation": {}
    },
    {
        "label": "SENDER_EMAIL",
        "kind": 5,
        "importPath": "app.utils.send_mail",
        "description": "app.utils.send_mail",
        "peekOfCode": "SENDER_EMAIL = \"khalidmimm@gmail.com\"\nSENDER_PASSWORD = Config.SENDER_PASSWORD \nclass EmailSchema(BaseModel):\n    receiver_email: str\n    subject: str\n    html_body: str\nasync def send_email(email_data: EmailSchema) -> Optional[bool]:\n    \"\"\"Send an email using an asynchronous SMTP client.\"\"\"\n    try:\n        message = EmailMessage()",
        "detail": "app.utils.send_mail",
        "documentation": {}
    },
    {
        "label": "SENDER_PASSWORD",
        "kind": 5,
        "importPath": "app.utils.send_mail",
        "description": "app.utils.send_mail",
        "peekOfCode": "SENDER_PASSWORD = Config.SENDER_PASSWORD \nclass EmailSchema(BaseModel):\n    receiver_email: str\n    subject: str\n    html_body: str\nasync def send_email(email_data: EmailSchema) -> Optional[bool]:\n    \"\"\"Send an email using an asynchronous SMTP client.\"\"\"\n    try:\n        message = EmailMessage()\n        message[\"From\"] = f\"Sheba.xyz <{SENDER_EMAIL}>\"",
        "detail": "app.utils.send_mail",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "class Settings(BaseSettings):\n    DB_USER: str\n    DB_PASS: str\n    DB_NAME:str\n    SENDER_PASSWORD:str\n    JWT_SECRET: str\n    JWT_ALGORITHM: str\n    model_config = SettingsConfigDict(env_file=\".env\", env_file_encoding=\"utf-8\")\nConfig = Settings()",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "Config = Settings()",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "DATABASE_URL = f\"postgresql+asyncpg://{Config.DB_USER}:{Config.DB_PASS}@localhost:5433/{Config.DB_NAME}\"\nengine = create_async_engine(DATABASE_URL, echo=True)\nasync_session = sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)\nBase = declarative_base()\n# Quick setup: create all tables based on your models.\nasync def init_db():\n    async with engine.begin() as conn:\n        # This will create all tables which do not yet exist.\n        await conn.run_sync(Base.metadata.create_all)\nasync def get_db():",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "engine = create_async_engine(DATABASE_URL, echo=True)\nasync_session = sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)\nBase = declarative_base()\n# Quick setup: create all tables based on your models.\nasync def init_db():\n    async with engine.begin() as conn:\n        # This will create all tables which do not yet exist.\n        await conn.run_sync(Base.metadata.create_all)\nasync def get_db():\n    async with async_session() as session:",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "async_session",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "async_session = sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)\nBase = declarative_base()\n# Quick setup: create all tables based on your models.\nasync def init_db():\n    async with engine.begin() as conn:\n        # This will create all tables which do not yet exist.\n        await conn.run_sync(Base.metadata.create_all)\nasync def get_db():\n    async with async_session() as session:\n        yield session",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "Base = declarative_base()\n# Quick setup: create all tables based on your models.\nasync def init_db():\n    async with engine.begin() as conn:\n        # This will create all tables which do not yet exist.\n        await conn.run_sync(Base.metadata.create_all)\nasync def get_db():\n    async with async_session() as session:\n        yield session",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:5173\", \"http://localhost:3000\"],  # Replace with your frontend URL\n    allow_credentials=True,\n    allow_methods=[\"*\"],  # Allow all methods (GET, POST, etc.)\n    allow_headers=[\"*\"],  # Allow all headers\n)\n# # If you want to automatically initialize your DB on startup,\n@app.on_event(\"startup\")",
        "detail": "app.main",
        "documentation": {}
    }
]